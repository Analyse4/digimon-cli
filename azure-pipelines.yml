trigger:
  - master
#variables:
#  GOPATH: 'C:\\usr\\gopath'
#  GOBIN:  '$(GOPATH)/bin' # Go binaries path
#  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

stages:

  - stage: Build
    jobs:
      - job: Linux
        pool:
          vmImage: ubuntu-latest
        steps:
          - bash: |
              echo "##vso[task.setvariable variable=gopath]$(system.defaultWorkingDirectory)/gopath"
          - bash: |
              echo "##vso[task.setvariable variable=gobin]$(GOPATH)/bin"
          - bash: |
              echo "##vso[task.setvariable variable=modulepath]$(GOPATH)/src/github.com/$(build.repository.name)"
          - script: |
              mkdir -p $(GOBIN)
              mkdir -p $(GOPATH)/pkg
              mkdir -p $(MODULEPATH)
              shopt -s extglob
              shopt -s dotglob
              mv !(gopath) $(MODULEPATH)
              echo '##vso[task.prependpath]$(GOBIN)'
              echo '##vso[task.prependpath]$(GOROOT)/bin'
            displayName: 'Set up the Go workspace'

          - script: |
              go version
              go get -v -t -d ./...
              if [ -f Gopkg.toml ]; then
                  curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
                  dep ensure
              fi
              go install -v
            workingDirectory: '$(MODULEPATH)'
            displayName: 'Get dependencies, then build'
          - publish: $(GOBIN)
            artifact: LinuxBinary
      - job: MacOS
        pool:
          vmImage: macOS-latest
        steps:
          - bash: |
              echo "##vso[task.setvariable variable=gopath]$(system.defaultWorkingDirectory)/gopath"
          - bash: |
              echo "##vso[task.setvariable variable=gobin]$(GOPATH)/bin"
          - bash: |
              echo "##vso[task.setvariable variable=modulepath]$(GOPATH)/src/github.com/$(build.repository.name)"
          - script: |
              mkdir -p $(GOBIN)
              mkdir -p $(GOPATH)/pkg
              mkdir -p $(MODULEPATH)
              shopt -s extglob
              shopt -s dotglob
              mv !(gopath) $(MODULEPATH)
              echo '##vso[task.prependpath]$(GOBIN)'
              echo '##vso[task.prependpath]$(GOROOT)/bin'
            displayName: 'Set up the Go workspace'
          - script: |
              go version
              go get -v -t -d ./...
              if [ -f Gopkg.toml ]; then
                  curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
                  dep ensure
              fi
              go install -v
            workingDirectory: '$(MODULEPATH)'
            displayName: 'Get dependencies, then build'
          - publish: $(GOBIN)
            artifact: MacOSBinary
      - job: Windows
        pool:
          vmImage: windows-latest
        steps:
          - bash: |
              echo "##vso[task.setvariable variable=gopath]C:\\usr\\gopath"
          - bash: |
              echo "##vso[task.setvariable variable=gobin]$(GOPATH)/bin"
          - bash: |
              echo "##vso[task.setvariable variable=modulepath]$(GOPATH)/src/github.com/$(build.repository.name)"
          - bash: |
              mkdir -p $(GOBIN)
              mkdir -p $(GOPATH)/pkg
              mkdir -p $(MODULEPATH)
              shopt -s extglob
              shopt -s dotglob
              mv * $(MODULEPATH)
              echo '##vso[task.prependpath]$(GOBIN)'
              echo '##vso[task.prependpath]$(GOROOT)/bin'

              echo $(GOPATH)
              ls $(GOPATH)
            displayName: 'Set up the Go workspace'
          - bash: |
              cd $(MODULEPATH)
              go version
              go get -v -t -d ./...
              if [ -f Gopkg.toml ]; then
                  curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
                  dep ensure
              fi
              go install -v
            displayName: 'Get dependencies, then build'
          - publish: $(GOBIN)
            artifact: WindowsBinary
  - stage: Package
    jobs:
      - job: Linux
        pool:
          vmImage: ubuntu-latest
        steps:
          - download: current
            artifact: LinuxBinary
          - script: |
              set -euo pipefail
              BINARY="$PIPELINE_WORKSPACE/LinuxBinary/digimon-cli"
              chmod +x "$BINARY"
              mkdir digimon-cli
              cp "$BINARY" digimon-cli/digimon-cli
              tar cf digimon-cli-linux-amd64.tar digimon-cli
              xz digimon-cli-linux-amd64.tar
            env:
              PIPELINE_WORKSPACE: $(Pipeline.Workspace)
          - publish: $(system.defaultWorkingDirectory)/digimon-cli-linux-amd64.tar.xz
            artifact: LinuxRelease
      - job: MacOS
        pool:
          vmImage: macOS-latest
        steps:
          - download: current
            artifact: MacOSBinary
          - script: |
              set -euo pipefail
              BINARY="$PIPELINE_WORKSPACE/MacOSBinary/digimon-cli"
              chmod +x "$BINARY"
              mkdir digimon-cli
              cp "$BINARY" digimon-cli/digimon-cli
              zip -r9 digimon-cli-darwin-amd64.zip digimon-cli
            env:
              PIPELINE_WORKSPACE: $(Pipeline.Workspace)
          - publish: $(system.defaultWorkingDirectory)/digimon-cli-darwin-amd64.zip
            artifact: MacOSRelease
      - job: Windows
        pool:
          vmImage: windows-latest
        steps:
          - download: current
            artifact: WindowsBinary
          - bash: |
              set -euo pipefail
              BINARY="$PIPELINE_WORKSPACE/WindowsBinary/digimon-cli"
              chmod +x "$BINARY"
              mkdir digimon-cli
              cp "$BINARY" digimon-cli/
              7z a -mx=9 digimon-cli-win-amd64.zip digimon-cli
            env:
              PIPELINE_WORKSPACE: $(Pipeline.Workspace)
          - publish: $(system.defaultWorkingDirectory)/digimon-cli-win-amd64.zip
            artifact: WindowsRelease
  - stage: PubRelease
    jobs:

      - job: Release
        steps:
          - download: current
            artifact: LinuxRelease
          - download: current
            artifact: MacOSRelease
          - download: current
            artifact: WindowsRelease
          - task: GithubRelease@0
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: release
              repositoryName: Analyse4/digimon-cli
              isPreRelease: true
#              tagSource: 'manual'
#              tag: '1.0.0-alpha.20'
              assets: |
                $(Pipeline.Workspace)/LinuxRelease/digimon-cli-linux-amd64.tar.xz
                $(Pipeline.Workspace)/MacOSRelease/digimon-cli-darwin-amd64.zip
                $(Pipeline.Workspace)/WindowsRelease/digimon-cli-win-amd64.zip