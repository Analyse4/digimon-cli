trigger:
  - master
variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

stages:

  - stage: Build
    jobs:

      - job: Build
        pool:
          vmImage: ubuntu-latest
        steps:
          - script: |
              mkdir -p '$(GOBIN)'
              mkdir -p '$(GOPATH)/pkg'
              mkdir -p '$(modulePath)'
              shopt -s extglob
              shopt -s dotglob
              mv !(gopath) '$(modulePath)'
              echo '##vso[task.prependpath]$(GOBIN)'
              echo '##vso[task.prependpath]$(GOROOT)/bin'
            displayName: 'Set up the Go workspace'

          - script: |
              go version
              go get -v -t -d ./...
              if [ -f Gopkg.toml ]; then
                  curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
                  dep ensure
              fi
              GOOS=linux GOARCH=amd64 go build -v -o digimon-cli-linux
              GOOS=darwin GOARCH=amd64 go build -v -o digimon-cli-macos
              GOOS=windows GOARCH=amd64 go build -v -o digimon-cli-win
              cp digimon-cli-linux $(GOBIN)
              cp digimon-cli-macos $(GOBIN)
              cp digimon-cli-win $(GOBIN)
            workingDirectory: '$(modulePath)'
            displayName: 'Get dependencies, then build'
          - publish: $(GOBIN)/digimon-cli-linux
            artifact: LinuxBinary
          - publish: $(GOBIN)/digimon-cli-macos
            artifact: MacOSBinary
          - publish: $(GOBIN)/digimon-cli-win
            artifact: WindowsBinary
#      - job: MacOS
#        pool:
#          vmImage: macOS-latest
#        steps:
#          - script: |
#              mkdir -p '$(GOBIN)'
#              mkdir -p '$(GOPATH)/pkg'
#              mkdir -p '$(modulePath)'
#              shopt -s extglob
#              shopt -s dotglob
#              mv !(gopath) '$(modulePath)'
#              echo '##vso[task.prependpath]$(GOBIN)'
#              echo '##vso[task.prependpath]$(GOROOT)/bin'
#            displayName: 'Set up the Go workspace'
#          - script: |
#              go version
#              go get -v -t -d ./...
#              if [ -f Gopkg.toml ]; then
#                  curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#                  dep ensure
#              fi
#              go install -v
#            workingDirectory: '$(modulePath)'
#            displayName: 'Get dependencies, then build'
#          - publish: $(GOBIN)/digimon-cli
#            artifact: MacOSBinary
#      - job: Windows
#        pool:
#          vmImage: windows-latest
#        steps:
#          - script: |
#              mkdir -p '$(GOBIN)'
#              mkdir -p '$(GOPATH)/pkg'
#              mkdir -p '$(modulePath)'
#              shopt -s extglob
#              shopt -s dotglob
#              mv !(gopath) '$(modulePath)'
#              echo '##vso[task.prependpath]$(GOBIN)'
#              echo '##vso[task.prependpath]$(GOROOT)/bin'
#            displayName: 'Set up the Go workspace'
#          - bash: |
#              go version
#              go get -v -t -d ./...
#              if [ -f Gopkg.toml ]; then
#                  curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#                  dep ensure
#              fi
#              go install -v
#            workingDirectory: '$(modulePath)'
#            displayName: 'Get dependencies, then build'
#          - publish: $(GOBIN)/digimon-cli
#            artifact: WindowsBinary

  - stage: Package
    jobs:

      - job: Linux
        pool:
          vmImage: ubuntu-latest
        steps:
          - download: current
            artifact: LinuxBinary
          - script: |
              set -euo pipefail
              BINARY="$PIPELINE_WORKSPACE/LinuxBinary/digimon-cli"
              chmod +x "$BINARY"
              mkdir digimon-cli
              cp "$BINARY" digimon-cli/digimon-cli
              tar cf digimon-cli-linux-amd64.tar digimon-cli
              xz digimon-cli-linux-amd64.tar
            env:
              PIPELINE_WORKSPACE: $(Pipeline.Workspace)
          - publish: $(System.DefaultWorkingDirectory)/digimon-cli-linux-amd64.tar.xz
            artifact: LinuxRelease
      - job: MacOS
        pool:
          vmImage: macOS-latest
        steps:
          - download: current
            artifact: MacOSBinary
          - script: |
              set -euo pipefail
              BINARY="$PIPELINE_WORKSPACE/LinuxBinary/digimon-cli"
              chmod +x "$BINARY"
              mkdir digimon-cli
              cp "$BINARY" digimon-cli/digimon-cli
              zip -r9 digimon-cli-macos.zip digimon-cli
            env:
              PIPELINE_WORKSPACE: $(Pipeline.Workspace)
          - publish: $(System.DefaultWorkingDirectory)/digimon-cli-macos.zip
            artifact: MacOSRelease
      - job: Windows
        pool:
          vmImage: windows-latest
        steps:
          - download: current
            artifact: WindowsBinary
          - bash: |
              set -euo pipefail
              BINARY="$PIPELINE_WORKSPACE/LinuxBinary/digimon-cli"
              chmod +x "$BINARY"
              mkdir digimon-cli
              cp "$BINARY" digimon-cli/digimon-cli
              7z a -mx=9 digimon-cli-win.zip digimon-cli
            env:
              PIPELINE_WORKSPACE: $(Pipeline.Workspace)
          - publish: $(System.DefaultWorkingDirectory)/digimon-cli-win.zip
            artifact: WindowsRelease

  - stage: PubRelease
    jobs:

      - job: Release
        steps:
          - download: current
            artifact: LinuxRelease
          - download: current
            artifact: MacOSRelease
          - download: current
            artifact: WindowsRelease
          - task: GithubRelease@0
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: release
              repositoryName: Analyse4/digimon-cli
              isPreRelease: true
              tagSource: 'manual'
              tag: '1.0.0-alpha.19'
              assets: |
                   $(Pipeline.Workspace)/LinuxRelease/digimon-cli-linux-amd64.tar.xz
                   $(Pipeline.Workspace)/MacOSRelease/digimon-cli-macos.zip
                   $(Pipeline.Workspace)/WindowsRelease/digimon-cli-win.zip